{-# LANGUAGE ViewPatterns #-}
{- | Move and cube definitions
 -}
module Rubik.Cube.Moves (
  -- * Generating moves
  u,r,f,d,l,b,
  move6,

  -- * 18 elementary moves
  move18Names,
  move18,

  -- * Other subgroups
  move10Names,
  move10,
  move6',

  -- * Symmetries
  surf3, sf2, su4, slr2,
  symCode,
  sym16,
  sym48,

  -- * Random cube/move
  randomCube,

  -- * Move algebra
  BasicMove,
  oppositeAndGT,

  ElemMove,
  Move,

  reduceMove,
  nubMove,

  -- ** Conversions
  moveToCube,

  moveToString,
  stringToMove,
  ) where

import Rubik.Cube.Coord
import Rubik.Cube.Cubie
import Rubik.Misc

import Control.Applicative
import Control.Monad

import Data.Char ( toLower )
import Data.Function ( on )
import Data.List
import Data.Maybe
import Data.Monoid
import qualified Data.Vector as V
import qualified Data.Vector.Unboxed as U

import System.Random

-- | Associate every elementary move with an 'ElemMove'.
move18Names, move10Names :: [ElemMove]
move18Names = [ (n, m) | m <- [U .. D], n <- [1 .. 3] ]
move10Names
  = [ (n, m) | m <- [U, D], n <- [1 .. 3] ] ++ [ (2, m) | m <- [L .. B] ]

-- Elementary moves

u_ =
  unsafeCube' ([1, 2, 3, 0] ++ [4..7])
          (replicate 8 0)
          ([1, 2, 3, 0] ++ [4..11])
          (replicate 12 0)

-- | Up
u  = u_
-- | Left
l  = surf3 ?? d
-- | Front
f  = surf3 ?? r
-- | Right
r  = surf3 ?? u
-- | Back
b  = surf3 ?? l
-- | Down
d  = sf2   ?? u

-- | List of the 6 generating moves.
--
-- > move6 = [u,l,f,r,b,d]
move6  = [u, l, f, r, b, d]

-- | List of the 18 elementary moves.
--
-- > move18 = [u, u <>^ 2, u <>^ 3, ...]
move18 = move6 >>= \x -> [x, x <>^ 2, x <>^ 3]

-- | Generating set of @G1@
move6' = [u,d] ++ map (<>^ 2) [l, f, r, b]

-- | > G1 = <U, D, L2, F2, R2, B2>
move10 = ([u, d] >>= \x -> [x, x <>^ 2, x <>^ 3]) ++ drop 2 move6'

-- Symmetries

-- | Rotation of the whole cube
-- around the diagonal axis through corners URF and LBD
surf3 =
  unsafeCube' [4, 5, 2, 1, 6, 3, 0, 7]
          [2, 1, 2, 1, 2, 1, 2, 1]
          [5, 9, 1, 8, 7, 11, 3, 10, 6, 2, 4, 0]
          [1, 0, 1, 0, 1,  0, 1,  0, 1, 1, 1, 1]

-- | Half-turn of the whole cube
-- around the FB axis
sf2 =
  unsafeCube' [6, 5, 4, 7, 2, 1, 0, 3]
          (replicate 8 0)
          [6, 5, 4, 7, 2, 1, 0, 3, 9, 8, 11, 10]
          (replicate 12 0)

-- | Quarter-turn around the UD axis
su4 =
  unsafeCube' [1, 2, 3, 0, 5, 6, 7, 4]
          (replicate 8 0)
          [1, 2, 3, 0, 5, 6, 7, 4, 9, 11, 8, 10]
          (replicate 8 0 ++ [1, 1, 1, 1])

-- | Reflection w.r.t. the RL slice plane
slr2 =
  unsafeCube' [3, 2, 1, 0, 5, 4, 7, 6]
          (replicate 8 6)
          [2, 1, 0, 3, 6, 5, 4, 7, 9, 8, 11, 10]
          (replicate 12 0)

-- x <- [0..47]
-- 2 * 4 * 2 * 3 = 48
-- 2 * 4 * 2 = 16
-- | Translate an integer to a symmetry.
symCode :: Coord -> Cube
symCode = (es V.!)
  where es = V.generate 47 eSym'
        eSym' x = (surf3 <>^ x1)
               <> (sf2   <>^ x2)
               <> (su4   <>^ x3)
               <> (slr2  <>^ x4)
          where x4 =  x          `mod` 2
                x3 = (x `div` 2) `mod` 4
                x2 = (x `div` 8) `mod` 2
                x1 =  x `div` 16 -- < 3

-- | Symmetries which preserve the UD axis
-- (generated by 'sf2', 'su4' and 'slr2')
sym16 = map symCode [0..15]

-- | All symmetries of the whole cube
sym48 = map symCode [0..47]

--

-- | Minimal set of moves
data BasicMove = U | L | F | R | B | D
  deriving (Enum, Eq, Ord, Show, Read)

-- | Quarter turns, clock- and anti-clockwise, half turns
type ElemMove = (Int, BasicMove)

-- | Moves generated by 'BasicMove', 'group'-ed
type Move = [ElemMove]

infixr 5 `consMove`

-- Trivial reductions
consMove :: ElemMove -> Move -> Move
consMove nm [] = [nm]
consMove nm@(n, m) (nm'@(n', m') : moves)
  | m == m' = case (n + n') `mod` 4 of
                0 -> moves
                p -> (p, m) : moves
  | oppositeAndGT m m' = nm' `consMove` nm `consMove` moves
consMove nm moves = nm : moves

-- | Relation between faces
--
-- @oppositeAndGT X Y == True@ if X and Y are opposite faces and @X > Y@.
oppositeAndGT :: BasicMove -> BasicMove -> Bool
oppositeAndGT = curry (`elem` [(D, U), (R, L), (B, F)])

-- | Perform "trivial" reductions of the move sequence.
reduceMove :: Move -> Move
reduceMove = foldr consMove []

-- | Scramble the solved cube.
moveToCube :: Move -> Cube
moveToCube = moveToCube' . reduceMove

moveToCube' :: Move -> Cube
moveToCube' [] = iden
moveToCube' (m : ms) = elemMoveToCube m <> moveToCube' ms

basicMoveToCube :: BasicMove -> Cube
basicMoveToCube = (move6 !!) . fromEnum

elemMoveToCube :: ElemMove -> Cube
elemMoveToCube (n, m) = move18 !! (fromEnum m * 3 + n - 1)

-- | Show the move sequence.
moveToString :: Move -> String
moveToString =
  intercalate " "
  . (mapMaybe $ \(n, m)
      -> (show m ++) <$> lookup (n `mod` 4) [(1, ""), (2, "2"), (3, "'")])

-- | Associates s character in @"ULFRBD"@ or the same in lowercase
-- to a generating move.
decodeMove :: Char -> Maybe BasicMove
decodeMove = (`lookup` zip "ulfrbd" [U .. D]) . toLower

-- | Reads a space-free sequence of moves.
-- If the string is incorrectly formatted,
-- the first wrong character is returned.
--
-- @([ulfrbd][23']?)*@
stringToMove :: String -> Either Char Move
stringToMove [] = return []
stringToMove (x : xs) = do
  m <- maybe (Left x) Right $ decodeMove x
  let (m_, next) =
        case xs of
          o   : next | o `elem` ['\'', '3'] -> ((3, m), next)
          '2' : next                        -> ((2, m), next)
          _                                 -> ((1, m), xs)
  (m_ :) <$> stringToMove next

-- | Remove moves that result in duplicate actions on the Rubik's cube
nubMove :: [Move] -> [Move]
nubMove = nubBy ((==) `on` moveToCube)

-- * Random cube

-- | Encode a 'Cube' as 4 integers.
--
-- The integers are wrapped to the ranges of each coordinate with 'mod'.
intToCube
  :: Int -- ^ Corner permutation
  -> Int -- ^ Corner orientation
  -> Int -- ^ Edge permutation
  -> Int -- ^ Edge orientation
  -> Cube
intToCube n1 n2 n3 n4 = Cube (Corner cp co) (Edge ep eo)
  where
    cp = let cCP = coordCornerPermu in decode cCP $ mod n1 (range cCP)
    co = let cCO = coordCornerOrien in decode cCO $ mod n2 (range cCO)
    ep = let cEP = coordEdgePermu in decode cEP $ mod n3 (range cEP)
    eo = let cEO = coordEdgeOrien in decode cEO $ mod n4 (range cEO)

-- | Generate a random 'Cube'.
--
-- Relies on 'randomRIO'.
randomCube :: IO Cube
randomCube = do
  c <- intToCube
         <$> randomRIO (0, range coordCornerPermu - 1)
         <*> randomRIO (0, range coordCornerOrien - 1)
         <*> randomRIO (0, range coordEdgePermu - 1)
         <*> randomRIO (0, range coordEdgeOrien - 1)
  if solvable c
    then return c
    else randomCube -- proba 1/2

